package com.yyhd.joke.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yyhd.joke.db.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Mobile = new Property(1, String.class, "mobile", false, "MOBILE");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Uuid = new Property(3, String.class, "uuid", false, "UUID");
        public final static Property HeadPic = new Property(4, String.class, "headPic", false, "HEAD_PIC");
        public final static Property RegisterTime = new Property(5, long.class, "registerTime", false, "REGISTER_TIME");
        public final static Property LastLoginTime = new Property(6, long.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property CumulativeLoginTimes = new Property(7, int.class, "cumulativeLoginTimes", false, "CUMULATIVE_LOGIN_TIMES");
        public final static Property ActiveStar = new Property(8, boolean.class, "activeStar", false, "ACTIVE_STAR");
        public final static Property LivelyStar = new Property(9, boolean.class, "livelyStar", false, "LIVELY_STAR");
        public final static Property KingStar = new Property(10, boolean.class, "kingStar", false, "KING_STAR");
        public final static Property InviteCode = new Property(11, String.class, "inviteCode", false, "INVITE_CODE");
        public final static Property WeChat = new Property(12, String.class, "weChat", false, "WE_CHAT");
        public final static Property HasMaster = new Property(13, boolean.class, "hasMaster", false, "HAS_MASTER");
        public final static Property HasNewNotify = new Property(14, boolean.class, "hasNewNotify", false, "HAS_NEW_NOTIFY");
        public final static Property SystemTime = new Property(15, String.class, "systemTime", false, "SYSTEM_TIME");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"MOBILE\" TEXT," + // 1: mobile
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"UUID\" TEXT," + // 3: uuid
                "\"HEAD_PIC\" TEXT," + // 4: headPic
                "\"REGISTER_TIME\" INTEGER NOT NULL ," + // 5: registerTime
                "\"LAST_LOGIN_TIME\" INTEGER NOT NULL ," + // 6: lastLoginTime
                "\"CUMULATIVE_LOGIN_TIMES\" INTEGER NOT NULL ," + // 7: cumulativeLoginTimes
                "\"ACTIVE_STAR\" INTEGER NOT NULL ," + // 8: activeStar
                "\"LIVELY_STAR\" INTEGER NOT NULL ," + // 9: livelyStar
                "\"KING_STAR\" INTEGER NOT NULL ," + // 10: kingStar
                "\"INVITE_CODE\" TEXT," + // 11: inviteCode
                "\"WE_CHAT\" TEXT," + // 12: weChat
                "\"HAS_MASTER\" INTEGER NOT NULL ," + // 13: hasMaster
                "\"HAS_NEW_NOTIFY\" INTEGER NOT NULL ," + // 14: hasNewNotify
                "\"SYSTEM_TIME\" TEXT);"); // 15: systemTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(5, headPic);
        }
        stmt.bindLong(6, entity.getRegisterTime());
        stmt.bindLong(7, entity.getLastLoginTime());
        stmt.bindLong(8, entity.getCumulativeLoginTimes());
        stmt.bindLong(9, entity.getActiveStar() ? 1L: 0L);
        stmt.bindLong(10, entity.getLivelyStar() ? 1L: 0L);
        stmt.bindLong(11, entity.getKingStar() ? 1L: 0L);
 
        String inviteCode = entity.getInviteCode();
        if (inviteCode != null) {
            stmt.bindString(12, inviteCode);
        }
 
        String weChat = entity.getWeChat();
        if (weChat != null) {
            stmt.bindString(13, weChat);
        }
        stmt.bindLong(14, entity.getHasMaster() ? 1L: 0L);
        stmt.bindLong(15, entity.getHasNewNotify() ? 1L: 0L);
 
        String systemTime = entity.getSystemTime();
        if (systemTime != null) {
            stmt.bindString(16, systemTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(5, headPic);
        }
        stmt.bindLong(6, entity.getRegisterTime());
        stmt.bindLong(7, entity.getLastLoginTime());
        stmt.bindLong(8, entity.getCumulativeLoginTimes());
        stmt.bindLong(9, entity.getActiveStar() ? 1L: 0L);
        stmt.bindLong(10, entity.getLivelyStar() ? 1L: 0L);
        stmt.bindLong(11, entity.getKingStar() ? 1L: 0L);
 
        String inviteCode = entity.getInviteCode();
        if (inviteCode != null) {
            stmt.bindString(12, inviteCode);
        }
 
        String weChat = entity.getWeChat();
        if (weChat != null) {
            stmt.bindString(13, weChat);
        }
        stmt.bindLong(14, entity.getHasMaster() ? 1L: 0L);
        stmt.bindLong(15, entity.getHasNewNotify() ? 1L: 0L);
 
        String systemTime = entity.getSystemTime();
        if (systemTime != null) {
            stmt.bindString(16, systemTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mobile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headPic
            cursor.getLong(offset + 5), // registerTime
            cursor.getLong(offset + 6), // lastLoginTime
            cursor.getInt(offset + 7), // cumulativeLoginTimes
            cursor.getShort(offset + 8) != 0, // activeStar
            cursor.getShort(offset + 9) != 0, // livelyStar
            cursor.getShort(offset + 10) != 0, // kingStar
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // inviteCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // weChat
            cursor.getShort(offset + 13) != 0, // hasMaster
            cursor.getShort(offset + 14) != 0, // hasNewNotify
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // systemTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegisterTime(cursor.getLong(offset + 5));
        entity.setLastLoginTime(cursor.getLong(offset + 6));
        entity.setCumulativeLoginTimes(cursor.getInt(offset + 7));
        entity.setActiveStar(cursor.getShort(offset + 8) != 0);
        entity.setLivelyStar(cursor.getShort(offset + 9) != 0);
        entity.setKingStar(cursor.getShort(offset + 10) != 0);
        entity.setInviteCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWeChat(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHasMaster(cursor.getShort(offset + 13) != 0);
        entity.setHasNewNotify(cursor.getShort(offset + 14) != 0);
        entity.setSystemTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
