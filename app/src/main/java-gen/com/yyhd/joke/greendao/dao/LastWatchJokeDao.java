package com.yyhd.joke.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yyhd.joke.db.entity.LastWatchJoke;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_WATCH_JOKE".
*/
public class LastWatchJokeDao extends AbstractDao<LastWatchJoke, String> {

    public static final String TABLENAME = "LAST_WATCH_JOKE";

    /**
     * Properties of entity LastWatchJoke.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property JokeCode = new Property(0, String.class, "jokeCode", true, "JOKE_CODE");
        public final static Property PublicTime = new Property(1, String.class, "publicTime", false, "PUBLIC_TIME");
        public final static Property JokeId = new Property(2, String.class, "jokeId", false, "JOKE_ID");
    }


    public LastWatchJokeDao(DaoConfig config) {
        super(config);
    }
    
    public LastWatchJokeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_WATCH_JOKE\" (" + //
                "\"JOKE_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: jokeCode
                "\"PUBLIC_TIME\" TEXT," + // 1: publicTime
                "\"JOKE_ID\" TEXT);"); // 2: jokeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_WATCH_JOKE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastWatchJoke entity) {
        stmt.clearBindings();
 
        String jokeCode = entity.getJokeCode();
        if (jokeCode != null) {
            stmt.bindString(1, jokeCode);
        }
 
        String publicTime = entity.getPublicTime();
        if (publicTime != null) {
            stmt.bindString(2, publicTime);
        }
 
        String jokeId = entity.getJokeId();
        if (jokeId != null) {
            stmt.bindString(3, jokeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastWatchJoke entity) {
        stmt.clearBindings();
 
        String jokeCode = entity.getJokeCode();
        if (jokeCode != null) {
            stmt.bindString(1, jokeCode);
        }
 
        String publicTime = entity.getPublicTime();
        if (publicTime != null) {
            stmt.bindString(2, publicTime);
        }
 
        String jokeId = entity.getJokeId();
        if (jokeId != null) {
            stmt.bindString(3, jokeId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LastWatchJoke readEntity(Cursor cursor, int offset) {
        LastWatchJoke entity = new LastWatchJoke( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // jokeCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // publicTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // jokeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastWatchJoke entity, int offset) {
        entity.setJokeCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPublicTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJokeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LastWatchJoke entity, long rowId) {
        return entity.getJokeCode();
    }
    
    @Override
    public String getKey(LastWatchJoke entity) {
        if(entity != null) {
            return entity.getJokeCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastWatchJoke entity) {
        return entity.getJokeCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
